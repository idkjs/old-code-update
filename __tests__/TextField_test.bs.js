// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReactTestingLibrary = require("bs-react-testing-library/src/ReactTestingLibrary.bs.js");
var Answer$ReactTemplate = require("../src/Answer.bs.js");
var TextField$ReactTemplate = require("../src/TextField.bs.js");

Jest.describe("Answer", (function (param) {
        var build = function (descriptionOpt, valueOpt, onChangeOpt, param) {
          var description = descriptionOpt !== undefined ? descriptionOpt : "";
          var value = valueOpt !== undefined ? Caml_option.valFromOption(valueOpt) : Answer$ReactTemplate.empty;
          var onChange = onChangeOpt !== undefined ? onChangeOpt : (function (param) {
                return /* () */0;
              });
          return ReactTestingLibrary.render(undefined, undefined, React.createElement(TextField$ReactTemplate.make, {
                          description: description,
                          value: value,
                          onChange: onChange
                        }));
        };
        Jest.test("renders the description", (function (param) {
                var description = "test description";
                var partial_arg = /* `Str */[
                  4153489,
                  description
                ];
                var title = (function (eta) {
                      var param = undefined;
                      var param$1 = eta;
                      return ReactTestingLibrary.getByText(partial_arg, param, param$1);
                    })(build(description, undefined, undefined, /* () */0));
                return Jest.Expect.toMatchSnapshot(Jest.Expect.expect(title));
              }));
        Jest.test("sets the value for the input", (function (param) {
                var answer = "test answer";
                var value = Curry._1(Answer$ReactTemplate.make, answer);
                var input = ReactTestingLibrary.getByValue(answer, build(undefined, Caml_option.some(value), undefined, /* () */0));
                return Jest.Expect.toMatchSnapshot(Jest.Expect.expect(input));
              }));
        return Jest.Skip.test("calls onChange", (function (param) {
                      var result = {
                        contents: Answer$ReactTemplate.empty
                      };
                      var onChange = function (answer) {
                        result.contents = answer;
                        return /* () */0;
                      };
                      var answer = "test answer";
                      var value = Curry._1(Answer$ReactTemplate.make, answer);
                      ReactTestingLibrary.getByValue(answer, build(undefined, Caml_option.some(value), onChange, /* () */0));
                      return Jest.Expect.toBe(true, Jest.Expect.expect(true));
                    }));
      }));

/*  Not a pure module */
